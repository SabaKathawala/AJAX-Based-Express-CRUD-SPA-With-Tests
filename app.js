//Code Generated By Express Generator.
//Including various middleware.
var express = require('express');
var path = require('path');
var logger = require('morgan');
var cookieParser = require('cookie-parser');
var bodyParser = require('body-parser');

/*
Middleware for handling the session
and storing the session variables.
The setup done using the instructions from
https://www.npmjs.com/package/express-session
*/

var session = require('express-session');

/*
Middleware for using the flash functionality
which could be used to define a flash message along with
the response. The setup done from
https://www.npmjs.com/package/express-flash
*/
var flash = require('express-flash');

/*
Currently all the routes
are defined in the single index file.
*/
var index = require('./routes/index');

var app = express();

/*
Package to generate tokens. We use this to generate
the Ids, and tokens for our users/tokens/posts object.
The installation and setup done as per
https://www.npmjs.com/package/rand-token
*/
app.randtoken = require('rand-token');

app.use(flash());

/*
Hard coded users object which user name 'Chris' and
password '491'. This is our format for saving the
user. User have post ids.
We append new users to this object.
*/
app.locals.users = {
    "Chris":{
        token:"lxu9i38azMnjxeQL",
        name:"Chris",
        pass:"491",
        movie:"SWAD",
        posts: ["1","2"],
        visibility: true
    }
} ;

/*
Hard coded Posts which has 2 posts by default.
We use the post id as the key and post have
id, value and visibility.
*/
app.locals.posts = {
    "1" :{
        id: "1",
        value: "I am post 1",
        visibility: true
    },
    "2" : {
        id: "2",
        value: "I am post 2",
        visibility: false
    }
};


/*
Whenever a user logs in, a token is created and
saved agaist the user name. This is how the user
is mapped from every request.
*/
app.locals.token = {
    "lxu9i38azMnjxeQL" : "Chris"
};

/*
Middleware to do the authentication for all requests
We just checks if a token exists and the session is maintained.
if not we redirect to login.
*/
function checkAuth (req, res, next) {
    var exceptions = ['/login', '/register', '/', '/editprofile', '/getdetails'];
    //Hacky way to bypass the check for posts url added.
    if(req.url.startsWith('/addpost') && (!req.session || !req.session.token)){
        var error = {status : 401, stack : []};
        var message = "Unauthorized Request";
        res.status(401);
        res.render('error', {
            error: error,
            message : message
        });
        // res.redirect("/error");
    }
    else {
        let allowedUrls = ['/posts', '/styles', '/js'];
        let allowed = false;
        allowedUrls.forEach(function(url){allowed = allowed || req.url.startsWith(url)});
        if (!allowed && exceptions.indexOf(req.url) === -1 && (!req.session || !req.session.token)) {
                res.redirect('/login');
                return;
            }
            else {
                next();
            }
    }

}


// view engine setup
app.set('views', path.join(__dirname, 'views'));
app.set('view engine', 'jade');
app.use(session({
    secret: 'topsecret',
    resave: true,
    saveUninitialized: true
}));
app.use(logger('dev'));
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: false }));
app.use(cookieParser());
app.use(checkAuth);
app.use(express.static(path.join(__dirname, 'public')));

app.use('/', index);

// catch 404 and forward to error handler
app.use(function(req, res, next) {
  var err = new Error('Not Found');
  err.status = 404;
  next(err);
});

// error handler
app.use(function(err, req, res, next) {
  // set locals, only providing error in development
  res.locals.message = req.app.get('env') === 'development' ?
      err.message : "Buggy Code Found";
  res.locals.error = req.app.get('env') === 'development' ? err : {};

  // render the error page
  res.status(err.status || 500);
  res.render('error');
});

//Setting the Environment to Production. Dev by default.
// app.set('env', 'production');
module.exports = app;
